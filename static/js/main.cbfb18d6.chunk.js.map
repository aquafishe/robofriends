{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","Component","Header","className","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Card","id","name","email","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","hasError","error","info","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cbfb18d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component{\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        if(this.state.count !== nextState.count){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: this.state.count + 1} \n        })\n    }\n\n    render(){\n        console.log('Header render');\n        return(\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Component, Fragment } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component{\n    // shouldComponentUpdate(nextProps, nextState){\n    //     return false;\n    // }\n    render(){\n        console.log('Header render');\n        return (\n            <Fragment>\n                <h1 className='f1'>Robofriends</h1>\n                <CounterButton color={'red'}/>\n            </Fragment>\n       \n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    console.log('SearchBox render');\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue' \n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '1000px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n// const { id, name, email } = props;\n\n// class Card extends Components {}\n// const Card = (props) => {\n\nconst Card = ({ id, name, email })  => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {  \n    /* DO NOT NEED TO CREATE cardArray, can just return \n    const cardArray = robots.map((user, i) => {\n        return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n    })\n    */\n   console.log('CardList render')\n    return (\n        <Fragment>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                        key={robots[i].id}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}    \n                    />\n                    )\n                })\n            }\n        </Fragment>\n    )\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true }) ;\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Opps... something went wrong.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header'\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        //destructure so do not need to use 'this.state' syntax everytime\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        \n        if (isPending){\n            return <h1 className='tc f1'>Loading...</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                    \n                </div>\n            )\n        }\n    }\n}\n\n//connect() is a Higher Order Functions, function which returns function\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n    } from './constants';\n\nexport const setSearchField = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(resp => resp.json() )\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => {\n        console.log('error: ', error)\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    })\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n    } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            //return Object.assign({}, state, {searchField: action.payload});\n            return {...state, searchField: action.payload}\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'; \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n    \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}